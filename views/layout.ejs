<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title><%= typeof title !== 'undefined' ? title : 'Spie√übuch' %></title>

  <!-- Manifest + Icons -->
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#ffffff">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="default">
  <meta name="apple-mobile-web-app-title" content="Spie√übuch">
  <link rel="apple-touch-icon" href="/icons/logo-192.png">
  <link rel="apple-touch-icon" href="/logo.png">

  <!-- CSS -->
  <link rel="stylesheet" href="/style.css" />
  <link rel="stylesheet" href="/hamburger.css">
  <style>
    html { scroll-behavior: smooth; }
  </style>
</head>

<body>
  <nav class="main-nav">
    <a href="/" class="logo logo-large">
      <img src="/logo.png" alt="Logo" /> Spie√übuch
    </a>

    <% if (user) { %>
      <button class="hamburger-btn" id="hamburger-btn" aria-label="Men√º √∂ffnen">
        <span></span><span></span><span></span>
      </button>

      <ul id="main-menu">
        <li><a href="/dashboard">Dashboard</a></li>
        <% if (user.is_admin) { %>
          <li><a href="/penalties">Strafen</a></li>
          <li><a href="/users">Nutzer</a></li>
        <% } %>
        <li><a href="/profil">Profil</a></li>
        <li><a href="/ranking">Ranking</a></li>
        <li><a href="/export">Export</a></li>
        <li><a href="/strafenkatalog.pdf" target="_blank" rel="noopener">üìÑ Strafenkatalog</a></li>
        <li>
          <form action="/logout" method="POST" style="display:inline; margin:0;">
            <button type="submit" class="btn btn-logout btn-icon" title="Logout" style="background:none; border:none; padding:0; cursor:pointer;">
              <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.1" stroke-linecap="round" stroke-linejoin="round" style="vertical-align:middle;display:inline-block">
                <path d="M9 16l-1.5-1.5M9 16l1.5-1.5M9 16h7"/>
                <path d="M16 12v-6a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v6"/>
                <polyline points="19 16 22 12 19 8"/>
                <line x1="22" y1="12" x2="9" y2="12"/>
              </svg>
            </button>
          </form>
        </li>
      </ul>
    <% } %>
  </nav>

  <% if (typeof noContainer !== 'undefined' && noContainer) { %>
    <main><%- body %></main>
  <% } else { %>
    <main class="container"><%- body %></main>
  <% } %>

  <footer class="footer">
    &copy; <%= new Date().getFullYear() %> GutSchlag Spie√übuch v.1.0 by RS
  </footer>

  <!-- Push-Benachrichtigungs-Modal -->
  <div id="push-popup" class="push-popup hidden">
    <div class="push-popup-box">
      <h2>üîî Push-Benachrichtigungen</h2>
      <p>M√∂chtest du benachrichtigt werden, wenn neue Strafen eingetragen werden?</p>
      <div class="push-popup-actions">
        <button id="enable-push" class="btn">Ja, aktivieren</button>
        <button id="dismiss-push" class="btn btn-secondary">Sp√§ter</button>
      </div>
    </div>
  </div>

  <script src="/menu.js"></script>

  <% if (user) { %>
    <script>
   
  if (!window.PUBLIC_VAPID_KEY) {
  window.PUBLIC_VAPID_KEY = 'BMNz5-yJd5D66IWYpt1jP6XWdodPJF-54HxRY34-15-D8zAc24G8P3lhsx8VHDfuWKwT1ZQi-Y9l12z7irijHVA';
}


  if (window.location.pathname === '/dashboard') {
    const isIos = /iphone|ipad|ipod/.test(navigator.userAgent.toLowerCase());
    const isStandalone = ('standalone' in navigator) && navigator.standalone;

    if (isIos && !isStandalone) {
      alert('üì± Um Push-Benachrichtigungen zu erhalten, installiere die App √ºber "Teilen" > "Zum Home-Bildschirm".');
    }

    function urlB64ToUint8Array(base64String) {
      const padding = '='.repeat((4 - base64String.length % 4) % 4);
      const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
      const rawData = window.atob(base64);
      return Uint8Array.from([...rawData].map(c => c.charCodeAt(0)));
    }

    navigator.serviceWorker.ready.then(async reg => {
      const sub = await reg.pushManager.getSubscription();

      if (!sub) {
        setTimeout(() => {
          if (sessionStorage.getItem('pushModalShown') === 'true') return;

          const popup = document.getElementById('push-popup');
          const enableBtn = document.getElementById('enable-push');
          const dismissBtn = document.getElementById('dismiss-push');

          popup.classList.remove('hidden');
          sessionStorage.setItem('pushModalShown', 'true');

          const closePopup = () => {
            popup.classList.add('fade-out');
            setTimeout(() => {
              popup.classList.add('hidden');
              popup.classList.remove('fade-out');
            }, 300);
          };

          enableBtn.addEventListener('click', async () => {
            try {
              const permission = await Notification.requestPermission();
              if (permission !== 'granted') {
                alert('Benachrichtigungen wurden nicht erlaubt.');
                closePopup();
                return;
              }

              const newSub = await reg.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: urlB64ToUint8Array(PUBLIC_VAPID_KEY)
              });

              const res = await fetch('/subscribe', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(newSub)
              });

              if (res.ok) {
                alert('‚úÖ Push erfolgreich aktiviert!');
              } else {
                alert('‚ùå Fehler beim Speichern der Subscription.');
              }

              closePopup();
            } catch (err) {
              console.error('Push-Aktivierung fehlgeschlagen:', err);
              alert('‚ùå Push konnte nicht aktiviert werden.');
              closePopup();
            }
          });

          dismissBtn.addEventListener('click', () => {
            closePopup();
          });
        }, 1000);
      } else {
        await fetch('/subscribe', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(sub)
        });
      }
    }); // ‚Üê Ende von navigator.serviceWorker.ready.then
  } // ‚Üê Ende von if (window.location.pathname === '/dashboard')
</script>

    </script>
  <% } %>
</body>
</html>
